/*
 * SNavPreferenceDialog.cpp
 *
 *  Created on: 30 juil. 2010
 *      Author: chakode
 */

#include "../include/SNavPreferencesDialog.hpp"


SNavPreferencesDialog::SNavPreferencesDialog(const bool & _change_passwd,  const qint32 & _user_role )
: userRole(_user_role),
  settings(new SNavSettings()) ,
  nagiosHomeField(new QLineEdit()) ,
  statusFileField (new QLineEdit()) ,
  updateIntervalField( new QSpinBox() ) ,
  bBrowse( new QPushButton("&Browse...") ) ,
  passwdField( new QLineEdit() ) ,
  newPasswdField (new QLineEdit() ) ,
  RenewPasswdField( new QLineEdit() ) ,
  cancelButton( new QPushButton("&Close") ) ,
  applySettingButton( new QPushButton("&Apply settings")) ,
  changePasswdButton( new QPushButton("C&hange password")) ,
  layout( new QGridLayout(this))
  {
	qint32 line = -1;
	passwdField->setEchoMode( QLineEdit::Password ) ;
	newPasswdField->setEchoMode( QLineEdit::Password ) ;
	RenewPasswdField->setEchoMode( QLineEdit::Password ) ;

	if( ! _change_passwd )
	{
		line += 1,
				layout->addWidget(new QLabel("Native Web Interface"), line, 0),
				layout->addWidget(nagiosHomeField, line, 1, 1, 3) ;
		line += 1,
				layout->addWidget(new QLabel("Status file"), line, 0),
				layout->addWidget(statusFileField, line, 1, 1, 2),
				layout->addWidget(bBrowse, line, 3) ;
		line += 1,
				layout->addWidget(new QLabel("Graph update interval"), line, 0),
				layout->addWidget(updateIntervalField, line, 1, 1, 2),
				layout->addWidget(new QLabel("seconds"), line, 3) ;
		line += 1,
				layout->addWidget(cancelButton, line, 2),
				layout->addWidget(applySettingButton, line, 3);

		if( _user_role == OP_USER_ROLE )
		{
			nagiosHomeField->setEnabled(false) ;
			statusFileField->setEnabled(false) ;
			bBrowse->setEnabled(false) ;
			updateIntervalField->setEnabled(false) ;
			applySettingButton->setEnabled(false) ;
		}

	}
	else
	{
		line += 1,
				layout->addWidget(new QLabel("Current Password"), line, 0),
				layout->addWidget(passwdField, line, 1, 1, 2) ;

		line += 1,
				layout->addWidget(new QLabel("New password"), line, 0),
				layout->addWidget(newPasswdField, line, 1, 1, 2) ;

		line += 1,
				layout->addWidget(new QLabel("Retype new password"), line, 0),
				layout->addWidget(RenewPasswdField, line, 1, 1, 2) ;

		line += 1,
				layout->addWidget(cancelButton, line, 1),
				layout->addWidget(changePasswdButton, line, 2) ;
	}

	setContent() ;
	addEvents() ;
  }

SNavPreferencesDialog::~SNavPreferencesDialog()
{
	delete updateIntervalField ;
	delete statusFileField ;
	delete passwdField ;
	delete newPasswdField ;
	delete RenewPasswdField ;
	delete changePasswdButton ;
	delete cancelButton ;
	delete applySettingButton ;
	delete layout;
}

void SNavPreferencesDialog::showEvent ( QShowEvent *)
{
	setWindowTitle( "Preferences - " + APP_SHORT_NAME ) ;
}


void SNavPreferencesDialog::browse(void)
{
	QString status_file = QFileDialog::getOpenFileName();

	if ( ! status_file.isEmpty() )  statusFileField->setText(status_file);
}


void SNavPreferencesDialog::applySettings(void)
{
	QString nagios_home;

	nagios_home = nagiosHomeField->text();

	settings->setValue(NAGIOS_URL_KEY, nagios_home) ;
	settings->setValue(STATUS_FILE_KEY, statusFileField->text()) ;
	settings->setValue(UPDATE_INTERVAL_KEY, updateIntervalField->text()) ;
	settings->sync() ;

	close() ;

	emit urlChanged(nagios_home);
}


void SNavPreferencesDialog::changePasswd(void)
{
	QString clear_passwd, user_passwd, passwd, new_passwd, renew_passwd, key;

	if ( userRole == ADM_USER_ROLE )
	{
		key = ADM_PASSWD_KEY ;
		user_passwd = settings->value(key).toString() ;
	}
	else
	{
		key = OP_PASSWD_KEY ;
		user_passwd = settings->value(key).toString() ;
	}
	passwd = QCryptographicHash::hash(passwdField->text().toAscii(), QCryptographicHash::Md5) ;
	new_passwd = QCryptographicHash::hash(newPasswdField->text().toAscii(), QCryptographicHash::Md5);
	renew_passwd = QCryptographicHash::hash(RenewPasswdField->text().toAscii(), QCryptographicHash::Md5);

	if( user_passwd == passwd )
	{
		if( new_passwd == renew_passwd )
		{
			settings->setKeyValue( key, new_passwd ) ;
			QMessageBox::information(this, APP_SHORT_NAME, "Password updated", QMessageBox::Ok) ;

			done(0) ;
		}
		else
		{
			QMessageBox::warning(this, APP_SHORT_NAME,
					"The two password are not the same", QMessageBox::Ok) ;
		}
	}
	else
	{
		QMessageBox::warning(this, APP_SHORT_NAME, "Wrong password", QMessageBox::Ok) ;
	}

}

void SNavPreferencesDialog::setContent(void)
{
	statusFile = settings->value(STATUS_FILE_KEY).toString() ;
	updateInterval = settings->value(UPDATE_INTERVAL_KEY).toInt() ;
	nagiosUrl = settings->value(NAGIOS_URL_KEY).toString() ;

	nagiosHomeField->setText(nagiosUrl) ;
	updateIntervalField->setValue(updateInterval) ;
	updateIntervalField->setMinimum(5);
	updateIntervalField->setMaximum(600);
	statusFileField->setText(statusFile) ;
}

void SNavPreferencesDialog::addEvents(void)
{
	connect(bBrowse, SIGNAL(clicked()), this, SLOT(browse()));
	connect(applySettingButton, SIGNAL(clicked()),  this, SLOT(applySettings()));
	connect(cancelButton, SIGNAL(clicked()), this, SLOT(reject()));
	connect(changePasswdButton, SIGNAL(clicked()),  this, SLOT(changePasswd()));
}
